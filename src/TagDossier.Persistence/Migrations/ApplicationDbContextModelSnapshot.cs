// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TagDossier.Persistence;

namespace TagDossier.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TagDossier.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TagDossier.Domain.Entities.Connector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Connector");
                });

            modelBuilder.Entity("TagDossier.Domain.Entities.Dossier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ResourceId")
                        .HasColumnType("bigint");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.HasIndex("TagId");

                    b.ToTable("Dossier");
                });

            modelBuilder.Entity("TagDossier.Domain.Entities.Resource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<int>("SourceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("TagDossier.Domain.Entities.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ConnectorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConnectorId");

                    b.ToTable("Source");
                });

            modelBuilder.Entity("TagDossier.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TagDossier.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TagDossier.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TagDossier.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TagDossier.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TagDossier.Domain.Entities.Dossier", b =>
                {
                    b.HasOne("TagDossier.Domain.Entities.Resource", "Resource")
                        .WithMany("Dossiers")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TagDossier.Domain.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TagDossier.Domain.ValueObjects.AuditInfo", "Created", b1 =>
                        {
                            b1.Property<long>("DossierId")
                                .HasColumnType("bigint");

                            b1.Property<Guid?>("ById")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("On")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("DossierId");

                            b1.HasIndex("ById");

                            b1.ToTable("Dossier");

                            b1.HasOne("TagDossier.Domain.Entities.ApplicationUser", "By")
                                .WithMany()
                                .HasForeignKey("ById");

                            b1.WithOwner()
                                .HasForeignKey("DossierId");
                        });

                    b.OwnsOne("TagDossier.Domain.ValueObjects.AuditInfo", "LastModified", b1 =>
                        {
                            b1.Property<long>("DossierId")
                                .HasColumnType("bigint");

                            b1.Property<Guid?>("ById")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("On")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("DossierId");

                            b1.HasIndex("ById");

                            b1.ToTable("Dossier");

                            b1.HasOne("TagDossier.Domain.Entities.ApplicationUser", "By")
                                .WithMany()
                                .HasForeignKey("ById");

                            b1.WithOwner()
                                .HasForeignKey("DossierId");
                        });
                });

            modelBuilder.Entity("TagDossier.Domain.Entities.Resource", b =>
                {
                    b.HasOne("TagDossier.Domain.Entities.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TagDossier.Domain.ValueObjects.AuditInfo", "Created", b1 =>
                        {
                            b1.Property<long>("ResourceId")
                                .HasColumnType("bigint");

                            b1.Property<Guid?>("ById")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("On")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("ResourceId");

                            b1.HasIndex("ById");

                            b1.ToTable("Resource");

                            b1.HasOne("TagDossier.Domain.Entities.ApplicationUser", "By")
                                .WithMany()
                                .HasForeignKey("ById");

                            b1.WithOwner()
                                .HasForeignKey("ResourceId");
                        });

                    b.OwnsOne("TagDossier.Domain.ValueObjects.AuditInfo", "LastModified", b1 =>
                        {
                            b1.Property<long>("ResourceId")
                                .HasColumnType("bigint");

                            b1.Property<Guid?>("ById")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("On")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("ResourceId");

                            b1.HasIndex("ById");

                            b1.ToTable("Resource");

                            b1.HasOne("TagDossier.Domain.Entities.ApplicationUser", "By")
                                .WithMany()
                                .HasForeignKey("ById");

                            b1.WithOwner()
                                .HasForeignKey("ResourceId");
                        });
                });

            modelBuilder.Entity("TagDossier.Domain.Entities.Source", b =>
                {
                    b.HasOne("TagDossier.Domain.Entities.Connector", "Connector")
                        .WithMany()
                        .HasForeignKey("ConnectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TagDossier.Domain.ValueObjects.AuditInfo", "Created", b1 =>
                        {
                            b1.Property<int?>("SourceTempId")
                                .HasColumnType("integer");

                            b1.Property<Guid?>("ById")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("On")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("SourceTempId");

                            b1.HasIndex("ById");

                            b1.ToTable("Source");

                            b1.HasOne("TagDossier.Domain.Entities.ApplicationUser", "By")
                                .WithMany()
                                .HasForeignKey("ById");

                            b1.WithOwner()
                                .HasForeignKey("SourceTempId");
                        });

                    b.OwnsOne("TagDossier.Domain.ValueObjects.AuditInfo", "LastModified", b1 =>
                        {
                            b1.Property<int?>("SourceTempId1")
                                .HasColumnType("integer");

                            b1.Property<Guid?>("ById")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("On")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("SourceTempId1");

                            b1.HasIndex("ById");

                            b1.ToTable("Source");

                            b1.HasOne("TagDossier.Domain.Entities.ApplicationUser", "By")
                                .WithMany()
                                .HasForeignKey("ById");

                            b1.WithOwner()
                                .HasForeignKey("SourceTempId1");
                        });
                });

            modelBuilder.Entity("TagDossier.Domain.Entities.Tag", b =>
                {
                    b.HasOne("TagDossier.Domain.Entities.Tag", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.OwnsOne("TagDossier.Domain.ValueObjects.AuditInfo", "Created", b1 =>
                        {
                            b1.Property<int>("TagId")
                                .HasColumnType("integer");

                            b1.Property<Guid?>("ById")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("On")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("TagId");

                            b1.HasIndex("ById");

                            b1.ToTable("Tag");

                            b1.HasOne("TagDossier.Domain.Entities.ApplicationUser", "By")
                                .WithMany()
                                .HasForeignKey("ById");

                            b1.WithOwner()
                                .HasForeignKey("TagId");
                        });

                    b.OwnsOne("TagDossier.Domain.ValueObjects.AuditInfo", "LastModified", b1 =>
                        {
                            b1.Property<int>("TagId")
                                .HasColumnType("integer");

                            b1.Property<Guid?>("ById")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("On")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("TagId");

                            b1.HasIndex("ById");

                            b1.ToTable("Tag");

                            b1.HasOne("TagDossier.Domain.Entities.ApplicationUser", "By")
                                .WithMany()
                                .HasForeignKey("ById");

                            b1.WithOwner()
                                .HasForeignKey("TagId");
                        });

                    b.OwnsOne("TagDossier.Domain.ValueObjects.Color", "Color", b1 =>
                        {
                            b1.Property<int>("TagId")
                                .HasColumnType("integer");

                            b1.Property<string>("Background")
                                .IsRequired()
                                .HasColumnName("BackgroundColor")
                                .HasColumnType("varchar(6)");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnName("TextColor")
                                .HasColumnType("varchar(6)");

                            b1.HasKey("TagId");

                            b1.ToTable("Tag");

                            b1.WithOwner()
                                .HasForeignKey("TagId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
